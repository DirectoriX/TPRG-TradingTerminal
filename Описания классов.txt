Покупатель
{
==============
Корзина (List Товаров)
Время "постановки в очередь" - int
Время конца обслуживания - int
Имеющаяся сумма - int
Уплаченная сумма - float/int
Количество товара (штук) - int
Дисконтная карта - int если есть, 0 если нет
--------------
Добавить денег(int)
Добавить товар(Goods)
}

Товар
{
==============
Название - string
Артикул - int
Количество (float)
Тип (штучный\весовой) (boolean)
Стоимость за единицу измерения - float/int
Среднее покупаемое количество (5 тетрадей, но 1 пенал) - int
}

Терминал-кассир (именно один класс, ибо неразрывны)
{
==============
Номер кассира - int
Количество денег в кассе ( +массив\List с кол-вом купюр) - int/float
Выручка за день - int/float
Очередь покупателей - Queue
--------------
Отдать деньги администратору(int)
Расчет с покупателем(Покупатель)
}

Распределение
{
==============
Время - int
Ширина - int
}

Статистика
{
==============
Количество обслуженных покупателей - int
Количество пришедших покупателей - int
Самая длинная очередь - int
Время самой длинной очереди
Средняя очередь - float
Среднее количество товаров у одного покупателя - float
Средняя стоимость покупки - float
То_что_сказал_Тельнов (подробный отчёт) - string
}

SQL-агент
==============
{
Имя БД - string
Адрес:порт - string
--------------
!!! Конструктор (Имя БД - string, адрес:порт - string)
Записать полупустую информацию о симуляции()
Обновить полупустую запись о симуляции до полной()
Записать информацию об элементарной покупке()
Получить список кодов, цен и количеств товаров()
Получить список кодов и имён товаров()
}

Генератор
==============
{
Список использованных дисконтных карт - int[]
--------------
Создать покупателя
Заполнить корзину(Покупатель)
Создать дисконтную карту(Покупатель)
}